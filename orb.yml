version: 2.1

description: |
  Update version constraints in your Terraform configurations and
  send pull request. Uses https://github.com/minamijoyo/tfupdate

executors:
  default:
    parameters:
      tag:
        type: string
        default: 'latest'
    docker:
      - image: minamijoyo/tfupdate:<< parameters.tag >>

commands:
  setup:
    description: Setup tfupdate
    parameters:
      git_user_name:
        description: git user name
        type: string
      git_user_email:
        description: git user email
        type: string
      github_token:
        description: environment variable name for GitHub access token
        type: env_var_name
        default: GITHUB_TOKEN
    steps:
      - run:
          name: Show tfupdate version 
          command: tfupdate --version
      - run:
          name: Show hub version 
          command: hub --version
      - run:
          name: Setup git config
          command: |
            git config --local user.name << parameters.git_user_name >>
            git config --local user.email << parameters.git_user_email >>
            mkdir -p $HOME/.config
            echo "https://${<< parameters.github_token >>}:@github.com" > $HOME/.config/git-credential
            git config --local credential.helper "store --file=$HOME/.config/git-credential"
            git config --local url."https://github.com/".insteadOf 'git@github.com:'
  terraform:
    description: Update the terraform to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: '-r ./'
      base_branch:
        description: A base branch name to update
        type: string
        default: master
    steps:
      - run:
          name: Update terraform to latest
          command: |
            VERSION=$(tfupdate release latest hashicorp/terraform)
            UPDATE_MESSAGE="[tfupdate] Update terraform to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate terraform -v ${VERSION} << parameters.args >>
              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/hashicorp/terraform/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi
  provider:
    description: Update a provider to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: '-r ./'
      base_branch:
        description: A base branch name to update
        type: string
        default: master
      provider_name:
        description: A name of provider
        type: string
    steps:
      - run:
          name: Update terraform-provider-<< parameters.provider_name >> to latest
          command: |
            VERSION=$(tfupdate release latest terraform-providers/terraform-provider-<< parameters.provider_name >>)
            UPDATE_MESSAGE="[tfupdate] Update terraform-provider-<< parameters.provider_name >> to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-provider-<< parameters.provider_name >>-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate provider << parameters.provider_name >> -v ${VERSION} << parameters.args >>
              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/terraform-providers/terraform-provider-<< parameters.provider_name >>/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi
